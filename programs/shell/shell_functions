#!/usr/bin/env bash
# find shorthand
function f() {
  find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# copy a file/dir recursively to ~/backups prompting for overwrites
backup() {
  cp -rvi "$1" ~/backups/
}

# like cd but fuzzy
cf() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir" || return
}

# save screen capture of selection to captures directory
scs() {
   scrot -s '%Y-%m-%d_$wx$h_scrot.png' -e 'mv $f ~/captures/'
}

kwon() {
  if [ -z "$1" ]; then
    kubectl config  get-contexts | fzf | awk '{print $1}' | xargs kubectl config use-context $1
  else
    kubectl config  get-contexts | fzf --select-1 -q "$1" | awk '{print $1}' | xargs kubectl config use-context
  fi
}

kexec() {
  namespace=$(kubectl get ns | fzf | cut -d ' ' -f 1)
  pod=$(kubectl get pods --namespace="${namespace}" | fzf | cut -d ' ' -f 1)
  echo "Running: kubectl exec ${pod} --namespace=${namespace} it -- $@"
  kubectl exec "$pod" --namespace="$namespace" -it -- "$@"
}

# KubernetesInteractiveDrain
kid() {
  kubectl get nodes -L 'failure-domain.beta.kubernetes.io/zone' -L nodegroup -L environment | fzf | awk '{print $1}' | xargs kubectl drain --ignore-daemonsets --delete-emptydir-data=true
}

function set_proxy() {
    export {http,https}_proxy='http://10.255.254.1:8118'
    export {HTTP,HTTPS}_PROXY='http://10.255.254.1:8118'
    export no_proxy='localhost,.rentalcover.internal,.infrastructure.internal,.xcover.internal,.brightwrite.internal,127.0.0.1/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,224.0.0.0/4,223.255.255.0/24,192.0.0.0/24,191.255.0.0/16,128.0.0.0/8'
    export NO_PROXY='localhost,.rentalcover.internal,.xcover.internal,.brightwrite.internal,127.0.0.1/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,224.0.0.0/4,223.255.255.0/24,192.0.0.0/24,191.255.0.0/16,128.0.0.0/8'
}

function unset_proxy() {
    unset {http,https,no}_proxy
    unset {HTTP,HTTPS,NO}_PROXY
}

# find files matching $1 and replace all $1 with $2 making backups of changed files (.back)
# forward slashed must be escaped.
ag-replace() {
  ag "$1" --files-with-matches | xargs -I {} sed -i '.back' -e "s/$1/$2/g" {}
}

# Delete all branches which no longer exist in the remote
# prompt for confirmation before running.
git-prune-branches() {
  git fetch -p && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs -r --interactive git branch -D
}

# ----- AWS commands ---------
# requires yawsi (go get github.com/amitsaha/yawsi)

# AWS SSH searchable by tags
# usage:
# aws-ssh dev
# aws-ssh dev projects_dao
# aws-ssh -i i-00827c6b810d8a2f2
aws-ssh() {
  #filter=""
  #shift
  #while (( $# > 0)); do
  #  case $1 in
  #    -i|--instance) filter="--instance-id=$2"
  #        break
  #        ;;
  #    -e|--environment) filter="--tags=Environment=$2"
  #        break
  #        ;;
  #    *) filter="--tags=Name:$1"
  #        break
  #  esac
  #  shift
  #done
  # if no role or instance is provided then fetches all instances, this is quite slow though
  #host=$(yawsi ec2 describe-instances $filter --list-format "{{.PrivateIPAddresses}} : {{.PublicIP}}")
  host=$(aws ec2 describe-instances \
    --query 'Reservations[*].Instances[*].{Instance:InstanceId,Type:InstanceType,Name:Tags[?Key == `Name`]|[0].Value,Environment:Tags[?Key == `Environment`]|[0].Value,PrivateIP:PrivateIpAddress,PublicIP:PublicIpAddress}' \
    --output=table | fzf)
  private_ip=$(echo $host | awk -F "|" '{print $5}' | awk '{$1=$1;print}' | tr -d "[]")
  public_ip=$(echo $host | awk -F "|" '{print $6}' | awk '{$1=$1;print}' | tr -d "[]")
  if ! [ -z "$private_ip" ]; then
    ssh "awright@$private_ip"
  else
    ssh "awright@$public_ip"
  fi
}

aws-profile() {
  if [ -z "$1" ]; then
    AWS_PROFILE=$(aws configure list-profiles | fzf)
  else
    AWS_PROFILE=$(aws configure list-profiles | fzf --select-1 -q "$1")
  fi
  export AWS_PROFILE=$AWS_PROFILE
}

aws-console() {
  if [ -z "$1" ]; then
    output=$(aws-sso-util roles | fzf)
  else
    output=$(aws-sso-util roles | fzf --select-1 -q "$1")
  fi
  account_id=$(echo "$output" | awk -F " " '{print $2}' | tr -d "[]")
  role=$(echo "$output" | awk -F " " '{print $3}' | tr -d "[]")
  aws-sso-util console launch --logout-first --account-id="$account_id" --role-name="$role"
}

aws-list() {
  host=$(aws ec2 describe-instances \
    --query 'Reservations[*].Instances[*].{Instance:InstanceId,Type:InstanceType,Name:Tags[?Key == `Name`]|[0].Value,Environment:Tags[?Key == `Environment`]|[0].Value,PrivateIP:PrivateIpAddress,PublicIP:PublicIpAddress}' \
    --output=table | fzf)
  echo $host
}
