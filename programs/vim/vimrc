set shell=/bin/sh
" remap leader
let mapleader = "\<Space>"

" --- coc stuff ---
let g:coc_global_extensions = ['coc-eslint', 'coc-rls', 'coc-prettier', 'coc-tsserver', 'coc-tslint', 'coc-tslint-plugin', 'coc-css', 'coc-json', 'coc-pyls', 'coc-yaml', 'coc-phpls', 'coc-go']

" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Remap keys for gotos
nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gt <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)
nmap <silent> <leader>r <Plug>(coc-rename)
nmap <silent> <leader>d :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" --- language server ---

let g:LanguageClient_serverCommands = {
    \ 'rust': ['rls'],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'typescript': ['javascript-typescript-stdio'],
    \ 'javascript.jsx': ['javascript-typescript-stdio'],
    \ 'python': ['pyls'],
    \ }

nmap <leader>m :call LanguageClient_contextMenu()<CR>
"nmap <leader>d :call LanguageClient_textDocument_hover()<CR>
"nmap <leader>g :call LanguageClient_textDocument_definition()<CR>
nmap <leader>s :call LanguageClient_textDocument_documentSymbol()<CR>
nmap <leader>f :call LanguageClient_textDocument_formatting()<CR>

let g:LanguageClient_changeThrottle = 0.5
let g:LanguageClient_diagnosticsDisplay = {
            \ 1: {
            \     "name": "Error",
            \     "texthl": "ALEError",
            \     "signText": "!",
            \     "signTexthl": "ALEErrorSign",
            \     "virtualTexthl": "Error",
            \ },
            \ 2: {
            \     "name": "Warning",
            \     "texthl": "ALEWarning",
            \     "signText": ">",
            \     "signTexthl": "ALEWarningSign",
            \     "virtualTexthl": "Todo",
            \ },
            \ 3: {
            \     "name": "Information",
            \     "texthl": "ALEInfo",
            \     "signText": "ℹ",
            \     "signTexthl": "ALEInfoSign",
            \     "virtualTexthl": "Todo",
            \ },
            \ 4: {
            \     "name": "Hint",
            \     "texthl": "ALEInfo",
            \     "signText": "~",
            \     "signTexthl": "ALEInfoSign",
            \     "virtualTexthl": "Todo",
            \ },
            \ }

" testing

nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ta :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tg :TestVisit<CR>

" --- General Settings ---

" Leave paste mode when leaving insert mode
autocmd InsertLeave * set nopaste

" Default indentation settings
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent

" line numbering
set number

" turn on syntax highlighting
syntax on
syntax enable

" turn on spell checking
:setlocal spell
:setlocal spell spelllang=en_us

" remap jk to esc
:inoremap jk <Esc>

" remap arrow keys to nothing in normal mode
:noremap <Up> <nop>
:noremap <Down> <nop>
:noremap <Left> <nop>
:noremap <Right> <nop>

" linting
let g:ale_rust_cargo_use_check = 1
let g:ale_rust_cargo_check_all_targets = 1
let g:ale_sign_error = '!'
let g:ale_sign_warning = '>'
let g:ale_rust_rls_config = {
	\ 'rust': {
		\ 'all_targets': 1,
		\ 'build_on_save': 1,
		\ 'clippy_preference': 'on'
	\ }
	\ }
let g:ale_rust_rls_toolchain = ''
let g:ale_linters = {'rust': ['rls']}
highlight ALEErrorSign ctermfg=red
highlight ALEWarningSign ctermfg=yellow
let g:ale_sign_error = "✖"
let g:ale_sign_warning = "⚠"
let g:ale_sign_info = "i"
let g:ale_sign_hint = "➤"

" use fzf as ctl-p
nnoremap <silent> <C-p> :Files<CR>
nmap <leader><leader> :Buffers<CR>

" use rg for grep
if executable('rg')
	set grepprg=rg\ --no-heading\ --vimgrep
	set grepformat=%f:%l:%c:%m
endif

" vim theme (used with altercation/vim-colors-solarized)
set background=dark
colorscheme solarized
let g:solarized_termcolors=256

" subtle highlight for matching brackets
highlight MatchParen cterm=bold ctermbg=none ctermfg=blue
" Ensure spell check results are visible
highlight SpellBad cterm=underline

" Airlines theme (vim-airline)
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'

" enable backspace/delete (mac)
set backspace=indent,eol,start

" Syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" wrap errors at bottom of vim screen
autocmd FileType qf setlocal wrap

" ------ Python Settings ------

" python syntax highlighting
let python_highlight_all=1

autocmd FileType python set tabstop=4
autocmd FileType python set softtabstop=4
autocmd FileType python set shiftwidth=4
autocmd FileType python set textwidth=0
autocmd FileType python set expandtab
autocmd FileType python set autoindent
autocmd FileType python set fileformat=unix

au FileType python let b:dispatch = 'fli service test .'
au FileType python nmap <leader>t :Dispatch!<CR>

" auto format on save
"let g:black_linelength = 100
"autocmd BufWritePre *.py execute ':Black'

" ------ PHP Settings ------

autocmd FileType php set tabstop=4
autocmd FileType php set softtabstop=4
autocmd FileType php set shiftwidth=4
autocmd FileType php set expandtab
autocmd FileType php set autoindent
let g:ale_php_phpstan_use_global = 1

" ------ JS Settings ------
autocmd FileType javascript set tabstop=2
autocmd FileType javascript set softtabstop=2
autocmd FileType javascript set shiftwidth=2
autocmd FileType javascript set expandtab
autocmd FileType javascript set autoindent

" ------ Typescript -------
autocmd FileType typescript set tabstop=2
autocmd FileType typescript set softtabstop=2
autocmd FileType typescript set shiftwidth=2
autocmd FileType typescript set expandtab
autocmd FileType typescript set autoindent

" ------ Jenkinsfile Settings ------
" treat Jenkinsfile.* files as Jenkinsfile files
autocmd BufNewFile,BufRead Jenkinsfile.* set filetype=Jenkinsfile
autocmd FileType Jenkinsfile set tabstop=2
autocmd FileType Jenkinsfile set softtabstop=2
autocmd FileType Jenkinsfile set shiftwidth=2
autocmd FileType Jenkinsfile set expandtab
autocmd FileType Jenkinsfile set autoindent

" ------ API blueprint (.apib) settings
autocmd FileType apiblueprint set expandtab
autocmd FileType apiblueprint set tabstop=4
autocmd FileType apiblueprint set softtabstop=4
autocmd FileType apiblueprint set shiftwidth=4

" ------ toml (.toml) settings
autocmd FileType toml set expandtab
autocmd FileType toml set autoindent
autocmd FileType toml set tabstop=2
autocmd FileType toml set softtabstop=2
autocmd FileType toml set shiftwidth=2

" ------ c++ (.cpp) settings
autocmd FileType cpp set expandtab
autocmd FileType cpp set autoindent
autocmd FileType cpp set tabstop=2
autocmd FileType cpp set softtabstop=2
autocmd FileType cpp set shiftwidth=2

autocmd BufNewFile,BufRead *xmobarrc set filetype=haskell

" ------ Rust-lang Settings ------
autocmd FileType rust let b:dispatch = 'cargo test'
autocmd FileType rust nmap <leader>b :Dispatch cargo build<CR>
"autocmd FileType rust nmap <leader>r :!cargo run<CR>
autocmd FileType rust nmap <leader>t :Dispatch<CR>
autocmd FileType rust nmap <leader>c :Dispatch cargo check<CR>

let g:rustfmt_autosave = 1
let g:racer_cmd = "/Users/andrewwright/.cargo/bin/racer"

" ------ go-lang Settings ------
"let g:go_version_warning = 0
" treat .go.tmpl files as go files
autocmd BufNewFile,BufRead *.go.tmpl set filetype=go

autocmd FileType go nmap <leader>b <Plug>(go-build)
autocmd FileType go nmap <leader>ta <Plug>(go-test)
"autocmd FileType go nmap <leader>gd <Plug>(go-def)
autocmd FileType go nmap <leader>l <Plug>(go-metalinter)
autocmd FileType go nmap <leader>sd <Plug>(go-doc)

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_fmt_command = "goimports"

au BufNewFile,BufRead *.go,*.go.gotmpl setlocal noet ts=4 sw=4 sts=4

" ------ crontab Settings ------
autocmd filetype crontab setlocal nobackup nowritebackup

" ------ ledger settings -------
autocmd BufNewFile,BufRead *.journal set filetype=ledger

" ------ docker settings -------
"let docker_highlight_all=1
"autocmd BufNewFile,BufRead *Dockerfile* set filetype=docker
